wget --load-cookies /tmp/cookies.txt "https://docs.google.com/uc?export=download&confirm=$(wget --quiet --save-cookies /tmp/cookies.txt --keep-session-cookies --no-check-certificate 'https://docs.google.com/uc?export=download&id=FILEID' -O- | sed -rn 's/.*confirm=([0-9A-Za-z_]+).*/\1\n/p')&id=FILEID" -O FILENAME && rm -rf /tmp/cookies.txt


https://drive.google.com/drive/folders/1I9l8FL6WJFcLibgLD4boG1yXowJ8pdL4?usp=sharing

https://drive.google.com/drive/folders/1I9l8FL6WJFcLibgLD4boG1yXowJ8pdL4?usp=sharing

drive pull -id <file or folder id>

https://drive.google.com/file/d/1pJIZe-2t4B8oKqUF1kpydN8473SB3guH/view?usp=sharing

 wget --no-check-certificate
 'https://docs.google.com/uc?export=download&id=1-hgjZ3EkoHpp3EcdKQNdX4vS7V1Bbx9M'
-O FILENAME


import logging

logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename='myapp.log',
    filemode='w'
)

logger = logging.getLogger(__name__)

def divide(x, y):
    try:
        result = x / y
    except ZeroDivisionError:
        logger.error("Tried to divide by zero")
        return None
    return result

result = divide(10, 2)
if result is not None:
    logger.info(f"Result of division: {result}")


import logging
from logging.handlers import TimedRotatingFileHandler
import os

# Create a directory to store log files (if it doesn't exist)
log_dir = 'logs'
os.makedirs(log_dir, exist_ok=True)

# Initialize the logger
logger = logging.getLogger('my_logger')
logger.setLevel(logging.DEBUG)

# Create a rotating file handler
log_file = os.path.join(log_dir, 'app.log')
file_handler = TimedRotatingFileHandler(log_file, when='midnight', interval=1, backupCount=7, utc=True)

# Create a formatter for the log entries
log_formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
file_handler.setFormatter(log_formatter)

# Add the file handler to the logger
logger.addHandler(file_handler)

# Log various messages
logger.debug('This is a debug message')
logger.info('This is an info message')
logger.warning('This is a warning message')
logger.error('This is an error message')
logger.critical('This is a critical message')











from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload

# Path to your service account JSON key file
credentials_file = "/content/starry-antonym-396712-9eb1035049c1.json"
folder_id = "17Y7xKiC0sNc1-Q7-m0YKDW5RC7rtfjR6"  # ID of the Google Drive folder where you want to save images

# Create a Google Drive API client
credentials = service_account.Credentials.from_service_account_file(credentials_file, scopes=['https://www.googleapis.com/auth/drive'])
drive_service = build('drive', 'v3', credentials=credentials)

# Upload an image to the folder
file_metadata = {
    'name': '/content/test_image.jpg',  # Name for the image in Google Drive
    'parents': [folder_id]  # ID of the target folder
}
media = MediaFileUpload('/content/test_image.jpg', mimetype='image/jpeg')
uploaded_file = drive_service.files().create(body=file_metadata, media_body=media).execute()

file_id = uploaded_file['id']

# Build the file URL
file_url = f'https://drive.google.com/uc?id={file_id}'

print(file_url,'file_url')

print('File ID: %s' % uploaded_file.get('id'))


